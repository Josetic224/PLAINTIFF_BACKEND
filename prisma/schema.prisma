generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// User model
model User {
  UserID       String   @id @default(uuid())
  Username     String?
  Password     String
  Email        String   @unique
  PhoneNumber  String
  Token        String   @default("")
  isVerified   Boolean  @default(false)
  RoleID       Int
  Role         Role[]
  Clients      Client[]
  Cases        Case[]
  
  // Add relation to Schedule model
  schedules    Schedule[] @relation("UserSchedules")
  settings     Settings[] @relation("UserSettings")
  
  @@unique([UserID])
  @@map("users")
}

// Role model
model Role {
  RoleID   String   @id @default(uuid())
  RoleName String
  Users    User     @relation(fields: [userId], references: [UserID])
  userId   String

  @@unique([RoleID])
  @@map("roles")
}

// Client model
model Client {
  ClientID       String   @id @default(uuid())
  FirstName      String
  LastName       String
  ContactNumber  String
  Email          String   @unique
  Address        String
  Gender         String   // Enumerated type for gender
  isDeleted      Boolean  @default(false)
  Case           Case?    @relation(fields: [CaseID], references: [CaseID])
  CaseID         String
  User           User     @relation(fields: [userId], references: [UserID])
  userId         String
  Documents      Document[]

  // Add opposite relation field for Schedule
  schedules      Schedule[] @relation("ClientSchedule")
  
  @@unique([FirstName, Email])
  @@map("clients")
}

// Case model
model Case {
  CaseID          String   @id @default(uuid())
  CaseName        String
  CaseDescription String
  AssignedUser    User     @relation(fields: [AssignedUserID], references: [UserID])
  AssignedUserID  String
  Clients         Client[]  

  @@unique([CaseID])
  @@map("cases")
}

// Document model
model Document {
  DocumentID   String   @id @default(uuid())
  DocumentName String
  FilePath     String
  Content      Bytes 
  UploadDate   DateTime @default(now())
  ClientID     String
  Client       Client   @relation(fields: [ClientID], references: [ClientID])

  @@unique([DocumentID])
  @@map("document")
}

// Schedule model
model Schedule {
  id                String   @id @default(uuid())
  clientName        String
  clientEmail       String
  dateOfAppointment DateTime
  timeOfAppointment String
  scheduleDetails   String
  client            Client   @relation("ClientSchedule", fields: [clientName, clientEmail], references: [FirstName, Email])
  user              User?    @relation("UserSchedules", fields: [userId], references: [UserID])
  userId            String
}

// Contact model
model Contact {
  id          String  @id @default(uuid())
  name        String
  email       String
  companyName String
  message     String
}

// Settings model
model Settings {
  settingsID      String  @id @default(uuid())
  Firmname        String
  Email           String  @unique
  Location        String?
  FirmDescription String?
  CurrentCountry  String?
  
  // Define relation to User model
  newUser      User?  @relation("UserSettings", fields: [newUserID], references: [UserID])
  newUserID    String    @unique

  @@map("settings")
}
