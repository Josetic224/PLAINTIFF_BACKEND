// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// User model
model User {
  UserID     Int      @id @default(autoincrement())
  Username   String?
  Password   String
  Email      String  @unique
  PhoneNumber String
  Token      String  @default("")
  isVerified  Boolean @default(false)
  RoleID     Int
  Role       Role[]
  Clients    Client[]
  Cases     Case[]
  
  // Add relation to Schedule model
  schedules  Schedule[] @relation("UserSchedules")
  
  @@unique([UserID])
  @@map("users")
}


// Role model
model Role {
  RoleID   Int     @id @default(autoincrement())
  RoleName String
  Users    User  @relation(fields: [userId], references: [UserID])
  userId  Int

  @@unique([RoleID])
  @@map("roles")
}

// Client model
model Client {
  ClientID       Int        @id @default(autoincrement())
  FirstName      String
  LastName       String
  ContactNumber  String
  Email          String     @unique
  Address        String
  Gender         String     // Enumerated type for gender
  isDeleted      Boolean @default(false)
  Case           Case?      @relation(fields: [CaseID], references: [CaseID])
  CaseID         Int?
  User           User       @relation(fields: [userId], references: [UserID])
  userId         Int
  Documents      Document[]
  
  // Add opposite relation field for Schedule
  schedules      Schedule[] @relation("ClientSchedule")
  
  @@unique([FirstName, Email])
  @@map("clients")
}

enum Gender {
  Male
  Female
}


// Case model
model Case {
  CaseID          Int          @id @default(autoincrement())
  CaseName        String
  CaseDescription String
   AssignedUser    User         @relation(fields: [AssignedUserID], references: [UserID])
  AssignedUserID  Int
  Clients         Client[]  

  @@unique([CaseID])
  @@map("cases")
}

// Document model
model Document {
  DocumentID   Int      @id @default(autoincrement())
  DocumentName String
  FilePath     String
  Content      Bytes 
  UploadDate   DateTime @default(now())
  ClientID     Int
  Client       Client   @relation(fields: [ClientID], references: [ClientID])

  @@unique([DocumentID])
  @@map("document")
}


// Schedule model
model Schedule {
  id                Int       @id @default(autoincrement())
  clientName        String
  clientEmail       String
  dateOfAppointment DateTime
  timeOfAppointment String
  scheduleDetails String
  client            Client   @relation("ClientSchedule", fields: [clientName, clientEmail], references: [FirstName, Email])
  user              User?    @relation("UserSchedules", fields: [userId], references: [UserID])
  userId            Int
}


